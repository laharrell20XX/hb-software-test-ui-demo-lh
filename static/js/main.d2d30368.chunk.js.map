{"version":3,"sources":["components/InvoiceList/index.js","components/LineItemList/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["InvoiceListItem","_ref","invoice","react_default","a","createElement","className","invoiceNum","concat","total","react_router_dom","to","id","InvoiceList","list","toFixed","colSpan","map","key","LineItem","lineItem","description","amount","LineItemsList","props","match","params","filteredLineItems","invoiceId","filter","Number","i","App","react_router","exact","path","component","LineItemList","Boolean","window","location","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAIA,SAASA,EAATC,GAAsC,IAAXC,EAAWD,EAAXC,QACvB,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACVH,EAAAC,EAAAC,cAAA,UAAKH,EAAQK,YACbJ,EAAAC,EAAAC,cAAA,cAAAG,OAASN,EAAQO,QACjBN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAE,YAAAH,OAAcN,EAAQU,KAC1BT,EAAAC,EAAAC,cAAA,4BAoCLQ,MA7Bf,WACI,IAAMC,EAAO,CACT,CAAEP,WAAc,OAAQE,OAAS,GAAKM,QAAQ,GAAIH,GAAM,GACxD,CAAEL,WAAc,OAAQE,OAAS,GAAKM,QAAQ,GAAIH,GAAM,GACxD,CAAEL,WAAc,OAAQE,OAAS,GAAKM,QAAQ,GAAIH,GAAM,IAE5D,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIW,QAAQ,KAAZ,aACAb,EAAAC,EAAAC,cAAA,MAAIW,QAAQ,KAAZ,WAGRb,EAAAC,EAAAC,cAAA,aACKS,EAAKG,IAAI,SAAAf,GAAO,OACbC,EAAAC,EAAAC,cAACL,EAAD,CAAiBE,QAASA,EAASgB,IAAKhB,EAAQU,kBClC5E,SAASO,EAATlB,GAAgC,IAAZmB,EAAYnB,EAAZmB,SAChB,OACIjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBACVH,EAAAC,EAAAC,cAAA,UAAKe,EAASC,aACdlB,EAAAC,EAAAC,cAAA,cAAAG,OAASY,EAASE,OAAOP,QAAQ,KACjCZ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,+BA+CDkB,MAzCf,SAAuBC,GAAO,IAClBZ,EAAOY,EAAMC,MAAMC,OAAnBd,GAWFe,EATY,CACd,CAAEN,YAAe,cAAeC,OAAU,MAAOM,UAAa,GAC9D,CAAEP,YAAe,aAAcC,OAAU,EAAMM,UAAa,GAC5D,CAAEP,YAAe,cAAeC,OAAU,MAAOM,UAAa,GAC9D,CAAEP,YAAe,oBAAqBC,OAAU,EAAMM,UAAa,GACnE,CAAEP,YAAe,cAAeC,OAAU,MAAOM,UAAa,GAC9D,CAAEP,YAAe,WAAYC,OAAU,MAAOM,UAAa,IAG3BC,OAAO,SAAAT,GAAQ,OAAIA,EAASQ,YAAcE,OAAOlB,KAErF,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIW,QAAQ,KAAZ,eACAb,EAAAC,EAAAC,cAAA,MAAIW,QAAQ,KAAZ,YAGRb,EAAAC,EAAAC,cAAA,aACKsB,EAAkBV,IAAI,SAACG,EAAUW,GAAX,OACnB5B,EAAAC,EAAAC,cAACc,EAAD,CAAUC,SAAUA,EAAUF,IAAKa,QAI/C5B,EAAAC,EAAAC,cAAA,2BAEJF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAYL,UAAU,kBAA/B,UChCG0B,MAZf,WACE,OACE7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjCV,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWvB,IACzCV,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWC,MCCzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCXNiB,IAASC,OAAOxC,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAYP,EAAAC,EAAAC,cAACuC,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d2d30368.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nfunction InvoiceListItem({ invoice }) {\r\n    return (\r\n        <tr className=\"invoice-table-row\">\r\n            <td>{invoice.invoiceNum}</td>\r\n            <td>{`$${invoice.total}`}</td>\r\n            <td>\r\n                <Link to={`invoices/${invoice.id}`}>\r\n                    <button>Details</button>\r\n                </Link>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction InvoiceList() {\r\n    const list = [\r\n        { \"invoiceNum\": \"0001\", \"total\": 0.00.toFixed(2), \"id\": 1 },\r\n        { \"invoiceNum\": \"0002\", \"total\": 0.00.toFixed(2), \"id\": 2 },\r\n        { \"invoiceNum\": \"0003\", \"total\": 0.00.toFixed(2), \"id\": 3 }\r\n    ]\r\n    return (\r\n        <div className=\"invoice-list\">\r\n            <h1>Invoices</h1>\r\n            <button>New Invoice</button>\r\n            <div>\r\n                <table>\r\n                    <thead className=\"invoice-table-header\">\r\n                        <tr>\r\n                            <th colSpan=\"1\">Invoice #</th>\r\n                            <th colSpan=\"1\">Total</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {list.map(invoice =>\r\n                            <InvoiceListItem invoice={invoice} key={invoice.id} />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvoiceList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.css';\r\n\r\nfunction LineItem({ lineItem }) {\r\n    return (\r\n        <tr className=\"list-item-table-row\">\r\n            <td>{lineItem.description}</td>\r\n            <td>{`$${lineItem.amount.toFixed(2)}`}</td>\r\n            <td>\r\n                <button>Remove Item</button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction LineItemsList(props) {\r\n    const { id } = props.match.params\r\n\r\n    const lineItems = [\r\n        { \"description\": \"Lorem Ipsum\", \"amount\": 12.34, \"invoiceId\": 1 },\r\n        { \"description\": \"Solor Amet\", \"amount\": 5.00, \"invoiceId\": 1 },\r\n        { \"description\": \"Lorem Ipsum\", \"amount\": 12.34, \"invoiceId\": 2 },\r\n        { \"description\": \"Tempor Incididunt\", \"amount\": 0.00, \"invoiceId\": 2 },\r\n        { \"description\": \"Lorem Ipsum\", \"amount\": 12.34, \"invoiceId\": 3 },\r\n        { \"description\": \"Ad Minim\", \"amount\": 43.45, \"invoiceId\": 3 },\r\n    ]\r\n\r\n    const filteredLineItems = lineItems.filter(lineItem => lineItem.invoiceId === Number(id))\r\n\r\n    return (\r\n        <div>\r\n            <h1>Line Items</h1>\r\n            <div className=\"list-items-list\">\r\n                <table>\r\n                    <thead className=\"list-item-table-header\">\r\n                        <tr>\r\n                            <th colSpan=\"1\">Description</th>\r\n                            <th colSpan=\"1\">Amount</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {filteredLineItems.map((lineItem, i) =>\r\n                            <LineItem lineItem={lineItem} key={i} />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n                <button>Add Item</button>\r\n            </div>\r\n            <button>Save Item</button>\r\n            <Link to=\"/invoices\" className=\"home-page-link\">\r\n                Home\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineItemsList","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport InvoiceList from '../InvoiceList';\nimport LineItemList from '../LineItemList';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={InvoiceList}></Route>\n      <Route exact path=\"/invoices\" component={InvoiceList}></Route>\n      <Route path=\"/invoices/:id\" component={LineItemList}></Route>\n    </Switch>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}